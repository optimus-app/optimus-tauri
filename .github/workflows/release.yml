name: "release"
on:
    workflow_dispatch:

jobs:
    create-release:
        permissions:
            contents: write
        runs-on: ubuntu-22.04
        outputs:
            release_id: ${{ steps.create-release.outputs.result }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "lts/*"

            - name: Get version
              run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

            - name: Create release
              id: create-release
              uses: actions/github-script@v6
              with:
                  script: |
                      const { data } = await github.rest.repos.createRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag_name: `v${process.env.PACKAGE_VERSION}`,
                        name: `v${process.env.PACKAGE_VERSION}`,
                        body: '*This release was generated automatically using GitHub Actions.*',
                        draft: true,
                        prerelease: false
                      })
                      return data.id

    build-tauri:
        needs: create-release
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest"
                      args: "--target aarch64-apple-darwin"
                    - platform: "macos-latest"
                      args: "--target x86_64-apple-darwin"
                    # - platform: "ubuntu-22.04"
                    #   args: ""
                    # - platform: "windows-latest"
                    #   args: ""

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: lts/*

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            - name: transform URLs for production
              run: |
                  if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
                    sed -i 's|"http://localhost:3000/\([^"]*\)"|"\1.html"|g' src-tauri/src/lib.rs
                  else
                    sed -i '' 's|"http://localhost:3000/\([^"]*\)"|"\1.html"|g' src-tauri/src/lib.rs
                  fi
                  echo "Modified lib.rs for production build:"
                  cat src-tauri/src/lib.rs

            - name: install frontend dependencies
              run: npm install

            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  releaseId: ${{ needs.create-release.outputs.release_id }}

    publish-release:
        permissions:
            contents: write
        runs-on: ubuntu-22.04
        needs: [create-release, build-tauri]

        steps:
            - name: Publish release
              id: publish-release
              uses: actions/github-script@v6
              env:
                  release_id: ${{ needs.create-release.outputs.release_id }}
              with:
                  script: |
                      github.rest.repos.updateRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        release_id: process.env.release_id,
                        draft: false,
                        prerelease: false
                      })
